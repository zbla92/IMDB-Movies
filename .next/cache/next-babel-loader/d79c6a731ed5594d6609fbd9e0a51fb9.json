{"ast":null,"code":"var _jsxFileName = \"/Users/milanblaz/Documents/Projects/vivant_movies/src/components/MovieCard/MovieCard.js\";\nvar __jsx = React.createElement;\nimport './movieCard.scss';\nimport { IoMdStar, IoMdStarHalf, IoMdStarOutline } from 'react-icons/io';\nimport React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchMovieDetails } from '../../redux/actions/movies';\nimport noImg from '../../images/photo_not_available.png';\nimport MovieCardLoader from '../../utils/MovieCardLoader/MovieCardLoader';\n\nclass MovieCard extends Component {\n  // Method to reduce the date since it comes in as year-mm-dd\n  dateToYear(date = '1999-12-12') {\n    return date ? date.slice(0, -6) : 2000;\n  } // Method that returns number of stars based on popularity of the movie\n\n\n  popularityStars(rating) {\n    rating = Math.round(rating);\n    const stars = [__jsx(IoMdStarOutline, {\n      key: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), __jsx(IoMdStarOutline, {\n      key: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), __jsx(IoMdStarOutline, {\n      key: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), __jsx(IoMdStarOutline, {\n      key: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), __jsx(IoMdStarOutline, {\n      key: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })];\n\n    for (let i = 1; i <= rating; i++) {\n      if (i % 2 === 0) {\n        stars[i / 2 - 1] = __jsx(IoMdStar, {\n          key: -i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        });\n      } else if (i % 2 === 1 && i === rating) {\n        stars[Math.floor(i / 2)] = __jsx(IoMdStarHalf, {\n          key: -i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n      }\n    }\n\n    return stars;\n  } // If no img return local noImage image\n\n\n  checkImg(url) {\n    if (url.length < 60) return noImg;else return url;\n  }\n\n  render() {\n    const {\n      imageUrl,\n      title,\n      year,\n      vote_average,\n      id\n    } = this.props;\n    return __jsx(\"div\", {\n      className: \"movie-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(MovieCardLoader, {\n      src: this.checkImg(imageUrl),\n      title: title,\n      id: id,\n      year: this.dateToYear(year),\n      stars: this.popularityStars(vote_average),\n      fetchMovieDetails: this.props.fetchMovieDetails,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n\n}\n\nMovieCard.propTypes = {\n  imageUrl: propTypes.string,\n  tite: propTypes.string,\n  year: propTypes.string,\n  vote_average: propTypes.number,\n  fetchMovieDetails: propTypes.func.isRequired\n};\nconst mapActionsToProps = {\n  fetchMovieDetails\n};\nexport default connect(null, mapActionsToProps)(MovieCard);","map":{"version":3,"sources":["/Users/milanblaz/Documents/Projects/vivant_movies/src/components/MovieCard/MovieCard.js"],"names":["IoMdStar","IoMdStarHalf","IoMdStarOutline","React","Component","propTypes","connect","fetchMovieDetails","noImg","MovieCardLoader","MovieCard","dateToYear","date","slice","popularityStars","rating","Math","round","stars","i","floor","checkImg","url","length","render","imageUrl","title","year","vote_average","id","props","string","tite","number","func","isRequired","mapActionsToProps"],"mappings":"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","sourcesContent":["import './movieCard.scss';\nimport { IoMdStar, IoMdStarHalf, IoMdStarOutline } from 'react-icons/io';\nimport React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { fetchMovieDetails } from '../../redux/actions/movies';\n\nimport noImg from '../../images/photo_not_available.png';\n\nimport MovieCardLoader from '../../utils/MovieCardLoader/MovieCardLoader';\n\nclass MovieCard extends Component {\n  // Method to reduce the date since it comes in as year-mm-dd\n  dateToYear(date = '1999-12-12') {\n    return date ? date.slice(0, -6) : 2000;\n  }\n  // Method that returns number of stars based on popularity of the movie\n  popularityStars(rating) {\n    rating = Math.round(rating);\n    const stars = [\n      <IoMdStarOutline key={1} />,\n      <IoMdStarOutline key={2} />,\n      <IoMdStarOutline key={3} />,\n      <IoMdStarOutline key={4} />,\n      <IoMdStarOutline key={5} />\n    ];\n    for (let i = 1; i <= rating; i++) {\n      if (i % 2 === 0) {\n        stars[i / 2 - 1] = <IoMdStar key={-i} />;\n      } else if (i % 2 === 1 && i === rating) {\n        stars[Math.floor(i / 2)] = <IoMdStarHalf key={-i} />;\n      }\n    }\n    return stars;\n  }\n  // If no img return local noImage image\n  checkImg(url) {\n    if (url.length < 60) return noImg;\n    else return url;\n  }\n\n  render() {\n    const { imageUrl, title, year, vote_average, id } = this.props;\n\n    return (\n      <div className=\"movie-card\">\n        {/**MovieCardLoader is component that is passing loading spinner until img source is fetched and img is ready to be displayed */}\n        <MovieCardLoader\n          src={this.checkImg(imageUrl)}\n          title={title}\n          id={id}\n          year={this.dateToYear(year)}\n          stars={this.popularityStars(vote_average)}\n          fetchMovieDetails={this.props.fetchMovieDetails}\n        />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  imageUrl: propTypes.string,\n  tite: propTypes.string,\n  year: propTypes.string,\n  vote_average: propTypes.number,\n  fetchMovieDetails: propTypes.func.isRequired\n};\n\nconst mapActionsToProps = {\n  fetchMovieDetails\n};\n\nexport default connect(null, mapActionsToProps)(MovieCard);\n"]},"metadata":{},"sourceType":"module"}
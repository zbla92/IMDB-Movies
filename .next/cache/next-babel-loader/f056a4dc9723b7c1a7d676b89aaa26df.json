{"ast":null,"code":"var _jsxFileName = \"/Users/milanblaz/Documents/Projects/vivant_movies/src/components/MovieList/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchMoviesByFilter } from '../../redux/actions/movies';\nimport { clearErrors } from '../../redux/actions/ui';\nimport { withRouter } from 'react-router-dom';\nimport GridView from './GridView/GridView';\nimport TableView from './TableView/TableView';\nimport GridSkeleton from '../../utils/Skeleton/GridSkeleton';\nimport TableSkeleton from '../../utils/Skeleton/TableSkeleton';\n\nclass MovieList extends React.Component {\n  componentDidMount() {\n    if (this.props.movies.length < 1) {\n      this.props.fetchMoviesByFilter(this.props.page, this.props.ui.filterBy).catch(ex => {\n        this.props.history.push('/');\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.page !== prevProps.page) {\n      this.props.fetchMoviesByFilter(this.props.page, this.props.ui.filterBy).catch(err => {\n        this.props.history.push('/');\n      });\n    }\n  }\n\n  render() {\n    const {\n      movies,\n      numOfPages,\n      clearErrors,\n      page\n    } = this.props;\n    const {\n      errors\n    } = this.props.ui;\n\n    if (this.props.ui.loading) {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.props.location.pathname.indexOf('gridView') > -1 ? __jsx(GridSkeleton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }) : __jsx(TableSkeleton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n\n    if (this.props.type === 'grid') {\n      return __jsx(GridView, {\n        movies: movies,\n        errors: errors,\n        clearErrors: clearErrors,\n        numOfPages: numOfPages,\n        page: page,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      });\n    } else {\n      return __jsx(TableView, {\n        movies: movies,\n        errors: errors,\n        clearErrors: clearErrors,\n        numOfPages: numOfPages,\n        page: page,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  ui: PropTypes.object,\n  numOfPages: PropTypes.number,\n  clearErrors: PropTypes.func,\n  page: PropTypes.number.isRequired\n};\nMovieList.defaultProps = {\n  movies: []\n};\n\nconst mapStateToProps = state => ({\n  movies: state.data.movies,\n  numOfPages: state.data.numOfPages,\n  ui: state.UI\n});\n\nconst mapActionsToProps = {\n  fetchMoviesByFilter,\n  clearErrors\n};\nexport default connect(mapStateToProps, mapActionsToProps)(withRouter(MovieList));","map":{"version":3,"sources":["/Users/milanblaz/Documents/Projects/vivant_movies/src/components/MovieList/index.js"],"names":["React","connect","PropTypes","fetchMoviesByFilter","clearErrors","withRouter","GridView","TableView","GridSkeleton","TableSkeleton","MovieList","Component","componentDidMount","props","movies","length","page","ui","filterBy","catch","ex","history","push","componentDidUpdate","prevProps","err","render","numOfPages","errors","loading","location","pathname","indexOf","type","propTypes","array","isRequired","object","number","func","defaultProps","mapStateToProps","state","data","UI","mapActionsToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { fetchMoviesByFilter } from '../../redux/actions/movies';\nimport { clearErrors } from '../../redux/actions/ui';\nimport { withRouter } from 'react-router-dom';\n\nimport GridView from './GridView/GridView';\nimport TableView from './TableView/TableView';\nimport GridSkeleton from '../../utils/Skeleton/GridSkeleton';\nimport TableSkeleton from '../../utils/Skeleton/TableSkeleton';\n\nclass MovieList extends React.Component {\n  componentDidMount() {\n    if (this.props.movies.length < 1) {\n      this.props\n        .fetchMoviesByFilter(this.props.page, this.props.ui.filterBy)\n        .catch(ex => {\n          this.props.history.push('/');\n        });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.page !== prevProps.page) {\n      this.props\n        .fetchMoviesByFilter(this.props.page, this.props.ui.filterBy)\n        .catch(err => {\n          this.props.history.push('/');\n        });\n    }\n  }\n\n  render() {\n    const { movies, numOfPages, clearErrors, page } = this.props;\n    const { errors } = this.props.ui;\n    if (this.props.ui.loading) {\n      return (\n        <div>\n          {this.props.location.pathname.indexOf('gridView') > -1 ? (\n            <GridSkeleton />\n          ) : (\n            <TableSkeleton />\n          )}\n        </div>\n      );\n    }\n\n    if (this.props.type === 'grid') {\n      return (\n        <GridView\n          movies={movies}\n          errors={errors}\n          clearErrors={clearErrors}\n          numOfPages={numOfPages}\n          page={page}\n        />\n      );\n    } else {\n      return (\n        <TableView\n          movies={movies}\n          errors={errors}\n          clearErrors={clearErrors}\n          numOfPages={numOfPages}\n          page={page}\n        />\n      );\n    }\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  ui: PropTypes.object,\n  numOfPages: PropTypes.number,\n  clearErrors: PropTypes.func,\n  page: PropTypes.number.isRequired\n};\n\nMovieList.defaultProps = {\n  movies: []\n};\n\nconst mapStateToProps = state => ({\n  movies: state.data.movies,\n  numOfPages: state.data.numOfPages,\n  ui: state.UI\n});\nconst mapActionsToProps = {\n  fetchMoviesByFilter,\n  clearErrors\n};\n\nexport default connect(\n  mapStateToProps,\n  mapActionsToProps\n)(withRouter(MovieList));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { FETCH_POPULAR_MOVIES, FETCH_MOVIES_BY_KEYWORD, LOADING_UI, STOP_LOADING_UI, KEYWORD, FILTER_BY, FETCH_MOVIE_DETAILS } from './types';\nimport moviesApi from '../../apis/movies-api'; // Fetching movies using given filters like popular, trending or rating\n\nconst fetchMoviesByFilter = (page, filter) => async dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n\n  try {\n    const movies = await moviesApi.fetchMoviesByFilter(page, filter);\n    dispatch({\n      type: FETCH_POPULAR_MOVIES,\n      payload: movies\n    });\n    dispatch({\n      type: STOP_LOADING_UI\n    });\n  } catch (err) {\n    throw err;\n  }\n}; // Fetching movies using search and it will display best results for the query\n\n\nconst fetchMoviesByKeyword = query => async dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  dispatch({\n    type: KEYWORD,\n    payload: query\n  });\n\n  try {\n    const movies = await moviesApi.fetchMoviesByKeyword(query);\n\n    if (movies.data.length < 1) {\n      alert('No search results for: ' + movies.query);\n      dispatch({\n        type: STOP_LOADING_UI\n      });\n      dispatch({\n        type: FILTER_BY,\n        payload: 'popular'\n      });\n    }\n\n    dispatch({\n      type: FETCH_MOVIES_BY_KEYWORD,\n      payload: movies\n    });\n    dispatch({\n      type: STOP_LOADING_UI\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst fetchMovieDetails = id => async dispatch => {\n  const movie = await moviesApi.fetchMovieDetails(id);\n  console.log('Fetching Movie Details: ', movie);\n  dispatch({\n    type: FETCH_MOVIE_DETAILS,\n    payload: movie\n  });\n};\n\nexport { fetchMoviesByFilter, fetchMoviesByKeyword, fetchMovieDetails };","map":{"version":3,"sources":["/Users/milanblaz/Documents/Projects/vivant_movies/src/redux/actions/movies.js"],"names":["FETCH_POPULAR_MOVIES","FETCH_MOVIES_BY_KEYWORD","LOADING_UI","STOP_LOADING_UI","KEYWORD","FILTER_BY","FETCH_MOVIE_DETAILS","moviesApi","fetchMoviesByFilter","page","filter","dispatch","type","movies","payload","err","fetchMoviesByKeyword","query","data","length","alert","fetchMovieDetails","id","movie","console","log"],"mappings":"AAAA,SACEA,oBADF,EAEEC,uBAFF,EAGEC,UAHF,EAIEC,eAJF,EAKEC,OALF,EAMEC,SANF,EAOEC,mBAPF,QAQO,SARP;AASA,OAAOC,SAAP,MAAsB,uBAAtB,C,CAEA;;AACA,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB,MAAMC,QAAN,IAAkB;AAC9DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAMW,MAAM,GAAG,MAAMN,SAAS,CAACC,mBAAV,CAA8BC,IAA9B,EAAoCC,MAApC,CAArB;AACAC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEZ,oBADC;AAEPc,MAAAA,OAAO,EAAED;AAFF,KAAD,CAAR;AAIAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACD,GAPD,CAOE,OAAOY,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAZD,C,CAcA;;;AACA,MAAMC,oBAAoB,GAAGC,KAAK,IAAI,MAAMN,QAAN,IAAkB;AACtDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACAS,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAER,OADC;AAEPU,IAAAA,OAAO,EAAEG;AAFF,GAAD,CAAR;;AAIA,MAAI;AACF,UAAMJ,MAAM,GAAG,MAAMN,SAAS,CAACS,oBAAV,CAA+BC,KAA/B,CAArB;;AACA,QAAIJ,MAAM,CAACK,IAAP,CAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BC,MAAAA,KAAK,CAAC,4BAA4BP,MAAM,CAACI,KAApC,CAAL;AACAN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAET;AAAR,OAAD,CAAR;AACAQ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,SADC;AAEPS,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID;;AACDH,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEX,uBADC;AAEPa,MAAAA,OAAO,EAAED;AAFF,KAAD,CAAR;AAIAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACD,GAfD,CAeE,OAAOY,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAxBD;;AA0BA,MAAMM,iBAAiB,GAAGC,EAAE,IAAI,MAAMX,QAAN,IAAkB;AAChD,QAAMY,KAAK,GAAG,MAAMhB,SAAS,CAACc,iBAAV,CAA4BC,EAA5B,CAApB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAxC;AACAZ,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEN,mBADC;AAEPQ,IAAAA,OAAO,EAAES;AAFF,GAAD,CAAR;AAID,CAPD;;AASA,SAASf,mBAAT,EAA8BQ,oBAA9B,EAAoDK,iBAApD","sourcesContent":["import {\n  FETCH_POPULAR_MOVIES,\n  FETCH_MOVIES_BY_KEYWORD,\n  LOADING_UI,\n  STOP_LOADING_UI,\n  KEYWORD,\n  FILTER_BY,\n  FETCH_MOVIE_DETAILS\n} from './types';\nimport moviesApi from '../../apis/movies-api';\n\n// Fetching movies using given filters like popular, trending or rating\nconst fetchMoviesByFilter = (page, filter) => async dispatch => {\n  dispatch({ type: LOADING_UI });\n  try {\n    const movies = await moviesApi.fetchMoviesByFilter(page, filter);\n    dispatch({\n      type: FETCH_POPULAR_MOVIES,\n      payload: movies\n    });\n    dispatch({ type: STOP_LOADING_UI });\n  } catch (err) {\n    throw err;\n  }\n};\n\n// Fetching movies using search and it will display best results for the query\nconst fetchMoviesByKeyword = query => async dispatch => {\n  dispatch({ type: LOADING_UI });\n  dispatch({\n    type: KEYWORD,\n    payload: query\n  });\n  try {\n    const movies = await moviesApi.fetchMoviesByKeyword(query);\n    if (movies.data.length < 1) {\n      alert('No search results for: ' + movies.query);\n      dispatch({ type: STOP_LOADING_UI });\n      dispatch({\n        type: FILTER_BY,\n        payload: 'popular'\n      });\n    }\n    dispatch({\n      type: FETCH_MOVIES_BY_KEYWORD,\n      payload: movies\n    });\n    dispatch({ type: STOP_LOADING_UI });\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst fetchMovieDetails = id => async dispatch => {\n  const movie = await moviesApi.fetchMovieDetails(id);\n  console.log('Fetching Movie Details: ', movie);\n  dispatch({\n    type: FETCH_MOVIE_DETAILS,\n    payload: movie\n  });\n};\n\nexport { fetchMoviesByFilter, fetchMoviesByKeyword, fetchMovieDetails };\n"]},"metadata":{},"sourceType":"module"}